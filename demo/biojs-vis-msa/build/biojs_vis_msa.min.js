(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
if (typeof biojs === 'undefined') {
  module.exports = biojs = {}
}
if (typeof biojs.vis === 'undefined') {
  module.exports = biojs.vis = {}
}
biojs.vis.msa = require('./')

},{"./":19}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var GenericReader, xhr;

xhr = require('nets');

module.exports = GenericReader = (function() {
  function GenericReader() {}

  GenericReader.read = function(url, callback) {
    var onret;
    onret = (function(_this) {
      return function(err, response, text) {
        return _this._onRetrieval(text, callback);
      };
    })(this);
    return xhr(url, onret);
  };

  GenericReader._onRetrieval = function(text, callback) {
    var end, rText, start;
    start = new Date().getTime();
    rText = this.parse(text);
    end = new Date().getTime();
    console.log("Parsing time: " + (end - start) + " ms");
    return callback(rText);
  };

  return GenericReader;

})();

},{"nets":10}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
module.exports.parse = require("./parser");

module.exports.writer = require("./writer");

},{"./parser":4,"./writer":7}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Fasta, GenericReader, Seq, Str,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Str = require("./strings");

GenericReader = require("./generic_reader");

Seq = require("biojs-model").seq;

module.exports = Fasta = (function(_super) {
  __extends(Fasta, _super);

  function Fasta() {
    return Fasta.__super__.constructor.apply(this, arguments);
  }

  Fasta.parse = function(text) {
    var currentSeq, database, databaseID, identifiers, k, label, line, seqs, _i, _len, _ref;
    seqs = [];
    _ref = text.split("\n");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      if (line[0] === ">" || line[0] === ";") {
        label = line.slice(1);
        currentSeq = new Seq("", label, seqs.length);
        seqs.push(currentSeq);
        if (Str.contains("|", line)) {
          identifiers = label.split("|");
          k = 1;
          while (k < identifiers.length) {
            database = identifiers[k];
            databaseID = identifiers[k + 1];
            currentSeq.meta[database] = databaseID;
            k += 2;
          }
          currentSeq.name = identifiers[identifiers.length - 1];
        }
      } else {
        currentSeq.seq += line;
      }
    }
    return seqs;
  };

  return Fasta;

})(GenericReader);

},{"./generic_reader":2,"./strings":5,"biojs-model":8}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var strings;

strings = {
  contains: function(text, search) {
    return ''.indexOf.call(text, search, 0) !== -1;
  }
};

module.exports = strings;

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var Utils;

Utils = {};

Utils.splitNChars = function(txt, num) {
  var i, result, _i, _ref;
  result = [];
  for (i = _i = 0, _ref = txt.length - 1; num > 0 ? _i <= _ref : _i >= _ref; i = _i += num) {
    result.push(txt.substr(i, num));
  }
  return result;
};

module.exports = Utils;

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
var FastaExporter, utils;

utils = require("./utils");

module.exports = FastaExporter = (function() {
  function FastaExporter() {}

  FastaExporter["export"] = function(seqs, access) {
    var seq, text, _i, _len;
    text = "";
    for (_i = 0, _len = seqs.length; _i < _len; _i++) {
      seq = seqs[_i];
      if (access != null) {
        seq = access(seq);
      }
      text += ">" + seq.name + "\n";
      text += (Utils.splitNChars(seq.seq, 80)).join("\n");
      text += "\n";
    }
    return text;
  };

  return FastaExporter;

})();

},{"./utils":6}],8:[function(require,module,exports){
module.exports.seq = require("./seq");

},{"./seq":9}],9:[function(require,module,exports){
module.exports = function(seq, name, id) {
    this.seq = seq;
    this.name = name;
    this.id = id;
    this.meta = {};
};

},{}],10:[function(require,module,exports){
var req = require('request')

module.exports = Nets

function Nets(uri, opts, cb) {
  req(uri, opts, cb)
}
},{"request":11}],11:[function(require,module,exports){
var window = require("global/window")
var once = require("once")

var messages = {
    "0": "Internal XMLHttpRequest Error",
    "4": "4xx Client Error",
    "5": "5xx Server Error"
}

var XHR = window.XMLHttpRequest || noop
var XDR = "withCredentials" in (new XHR()) ? XHR : window.XDomainRequest

module.exports = createXHR

function createXHR(options, callback) {
    if (typeof options === "string") {
        options = { uri: options }
    }

    options = options || {}
    callback = once(callback)

    var xhr = options.xhr || null

    if (!xhr) {
        if (options.cors || options.useXDR) {
            xhr = new XDR()
        }else{
            xhr = new XHR()
        }
    }

    var uri = xhr.url = options.uri || options.url;
    var method = xhr.method = options.method || "GET"
    var body = options.body || options.data
    var headers = xhr.headers = options.headers || {}
    var sync = !!options.sync
    var isJson = false
    var key

    if ("json" in options) {
        isJson = true
        headers["Accept"] = "application/json"
        if (method !== "GET" && method !== "HEAD") {
            headers["Content-Type"] = "application/json"
            body = JSON.stringify(options.json)
        }
    }

    xhr.onreadystatechange = readystatechange
    xhr.onload = load
    xhr.onerror = error
    // IE9 must have onprogress be set to a unique function.
    xhr.onprogress = function () {
        // IE must die
    }
    // hate IE
    xhr.ontimeout = noop
    xhr.open(method, uri, !sync)
                                    //backward compatibility
    if (options.withCredentials || (options.cors && options.withCredentials !== false)) {
        xhr.withCredentials = true
    }

    // Cannot set timeout with sync request
    if (!sync) {
        xhr.timeout = "timeout" in options ? options.timeout : 5000
    }

    if (xhr.setRequestHeader) {
        for(key in headers){
            if(headers.hasOwnProperty(key)){
                xhr.setRequestHeader(key, headers[key])
            }
        }
    } else if (options.headers) {
        throw new Error("Headers cannot be set on an XDomainRequest object");
    }

    if ("responseType" in options) {
        xhr.responseType = options.responseType
    }
    
    if ("beforeSend" in options && 
        typeof options.beforeSend === "function"
    ) {
        options.beforeSend(xhr)
    }

    xhr.send(body)

    return xhr

    function readystatechange() {
        if (xhr.readyState === 4) {
            load()
        }
    }

    function load() {
        var error = null
        var status = xhr.statusCode = xhr.status
        // Chrome with requestType=blob throws errors arround when even testing access to responseText
        var body = null

        if (xhr.response) {
            body = xhr.body = xhr.response
        } else if (xhr.responseType === 'text' || !xhr.responseType) {
            body = xhr.body = xhr.responseText || xhr.responseXML
        }

        if (status === 1223) {
            status = 204
        }

        if (status === 0 || (status >= 400 && status < 600)) {
            var message = (typeof body === "string" ? body : false) ||
                messages[String(status).charAt(0)]
            error = new Error(message)
            error.statusCode = status
        }
        
        xhr.status = xhr.statusCode = status;

        if (isJson) {
            try {
                body = xhr.body = JSON.parse(body)
            } catch (e) {}
        }

        callback(error, xhr, body)
    }

    function error(evt) {
        callback(evt, xhr)
    }
}


function noop() {}

},{"global/window":12,"once":13}],12:[function(require,module,exports){
(function (global){
if (typeof window !== "undefined") {
    module.exports = window
} else if (typeof global !== "undefined") {
    module.exports = global
} else {
    module.exports = {}
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],13:[function(require,module,exports){
module.exports = once

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })
})

function once (fn) {
  var called = false
  return function () {
    if (called) return
    called = true
    return fn.apply(this, arguments)
  }
}

},{}],14:[function(require,module,exports){
module.exports=require(8)
},{"./seq":15}],15:[function(require,module,exports){
module.exports=require(9)
},{}],16:[function(require,module,exports){
var Colorator, Utils,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Utils = require("./utils/general");

module.exports = Colorator = (function() {
  Colorator.prototype.scheme = "taylor";

  function Colorator() {
    this.colorSelectedResidueColumn = __bind(this.colorSelectedResidueColumn, this);
    this.colorSelectedResidue = __bind(this.colorSelectedResidue, this);
    this.colorResidue = __bind(this.colorResidue, this);
  }

  Colorator.prototype.setScheme = function(name) {
    this.scheme = name;
    return this.scheme = name.toLowerCase();
  };

  Colorator.prototype.colorResidue = function(aminoGroup, tSeq, pos) {
    var residue;
    aminoGroup.className = "biojs_msa_single_residue";
    residue = Colorator.getResidue(tSeq, pos);
    return aminoGroup.className += " biojs-msa-aa-" + residue;
  };

  Colorator.prototype.colorSelectedResidue = function(aminoGroup, tSeq, pos) {
    var residue;
    aminoGroup.className = "biojs_msa_single_residue";
    residue = Colorator.getResidue(tSeq, pos);
    return aminoGroup.className += " biojs-msa-aa-" + residue + "-selected";
  };

  Colorator.prototype.colorSelectedResidueColumn = function(aminoGroup, tSeq, pos) {
    var residue;
    aminoGroup.className = "biojs_msa_single_residue";
    residue = Colorator.getResidue(tSeq, pos);
    return aminoGroup.className += " biojs-msa-aa-" + residue + "-selected";
  };

  Colorator.prototype.colorSelectedResidueSingle = function(aminoGroup, tSeq, pos) {
    var residue;
    aminoGroup.className = "biojs_msa_single_residue";
    residue = Colorator.getResidue(tSeq, pos);
    aminoGroup.className += " biojs-msa-aa-" + residue + "-selected";
    return aminoGroup.className += " shadowed";
  };

  Colorator.prototype.colorColumn = function(columnGroup, columnPos) {
    columnGroup.style.backgroundColor = "transparent";
    return columnGroup.style.color = "";
  };

  Colorator.prototype.colorSelectedColumn = function(columnGroup, columnPos) {
    columnGroup.style.backgroundColor = Utils.rgba(Utils.hex2rgb("ff0000"), 1.0);
    return columnGroup.style.color = "white";
  };

  Colorator.prototype.colorRow = function(rowGroup, rowId) {
    rowGroup.className = "biojs_msa_sequence_block";
    return rowGroup.className += " biojs-msa-schemes-" + this.scheme;
  };

  Colorator.prototype.colorLabel = function(labelGroup, tSeq) {
    var color;
    if (labelGroup.color == null) {
      color = {};
      color.r = Math.ceil(Math.random() * 255);
      color.g = Math.ceil(Math.random() * 255);
      color.b = Math.ceil(Math.random() * 255);
      labelGroup.color = color;
    }
    labelGroup.color = Utils.hex2rgb("ffffff");
    return labelGroup.style.backgroundColor = Utils.rgba(labelGroup.color, 0.5);
  };

  Colorator.prototype.colorSelectedLabel = function(labelGroup, tSeq) {
    var label, rect;
    rect = labelGroup.children[0];
    label = labelGroup.children[1];
    labelGroup.style.textColor = "white";
    labelGroup.color = Utils.hex2rgb("ff0000");
    return labelGroup.style.backgroundColor = Utils.rgba(labelGroup.color, 1.0);
  };

  Colorator.getResidue = function(tSeq, pos) {
    var residue;
    residue = tSeq.seq.charAt(pos);
    if (residue === "-") {
      return "Gap";
    } else {
      return residue;
    }
  };

  return Colorator;

})();



},{"./utils/general":52}],17:[function(require,module,exports){
var EventHandler;

module.exports = EventHandler = (function() {
  function EventHandler(log) {
    this.log = log;
    this.subscribers = [];
  }

  EventHandler.prototype.notifyNewItemReleased = function(item) {
    var subscriber, _i, _len, _ref, _results;
    _ref = this.subscribers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subscriber = _ref[_i];
      if (subscriber.item === item) {
        _results.push(subscriber.callback(item));
      }
    }
    return _results;
  };

  EventHandler.prototype.subscribe = function(to, onNewItemReleased) {
    return this.subscribers.push({
      'item': to,
      'callback': onNewItemReleased
    });
  };

  EventHandler.prototype.onSelectionChanged = function(sel) {
    var name;
    if (sel != null) {
      name = sel.__proto__.constructor.name;
    }
    if (sel != null) {
      if (name === "VerticalSelection") {
        this.log("column was clicked at " + sel.column);
      }
      if (name === "HorizontalSelection") {
        this.log("row was clicked at " + sel.id);
      }
      if (name === "PositionSelection") {
        this.log("seq " + sel.id + " was clicked at " + sel.column);
      }
      if (name === "SelectionList") {
        return this.log("multiple selections available");
      }
    } else {
      return this.log("empty selection");
    }
  };

  EventHandler.prototype.onAnnotationClicked = function() {
    return this.log("not implemented yet");
  };

  EventHandler.prototype.onRegionSelected = function() {
    return this.log("not implemented yet");
  };

  EventHandler.prototype.onZoom = function() {
    return this.log("not implemented yet");
  };

  EventHandler.prototype.onScroll = function() {
    return this.log("not implemented yet");
  };

  EventHandler.prototype.onColorSchemeChanged = function() {
    return this.log("not implemented yet");
  };

  EventHandler.prototype.onDisplayEventChanged = function() {
    return this.log("not implemented yet");
  };

  return EventHandler;

})();



},{}],18:[function(require,module,exports){
var Feature;

module.exports = Feature = (function() {
  Feature.prototype.xStart = -1;

  Feature.prototype.xEnd = -1;

  Feature.prototype.height = -1;

  Feature.prototype.text = "";

  Feature.prototype.fillColor = "red";

  Feature.prototype.fillOpacity = 0.5;

  Feature.prototype.type = "rectangle";

  Feature.prototype.borderSize = 1;

  Feature.prototype.borderColor = "black";

  Feature.prototype.borderOpacity = 0.5;

  function Feature(xStart, xEnd, text, fillColor) {
    this.xStart = xStart;
    this.xEnd = xEnd;
    this.text = text;
    this.fillColor = fillColor;
  }

  return Feature;

})();



},{}],19:[function(require,module,exports){
module.exports.msa = require("./msa");
module.exports.colorator = require("./colorator");
module.exports.ordering = require("./ordering");
module.exports.menu = require("./menu/index");
module.exports.utils = require("./utils");
module.exports.row = require("./row");
module.exports.eventhandler = require("./eventhandler");
module.exports.selection = require("./selection");
module.exports.zoombar = require("./zoombar"); 
module.exports.stage = require("./stage/index");
module.exports.feature = require("./feature");
module.exports.seqmgr = require("./seqmgr");

},{"./colorator":16,"./eventhandler":17,"./feature":18,"./menu/index":22,"./msa":24,"./ordering":25,"./row":26,"./selection":28,"./seqmgr":37,"./stage/index":42,"./utils":53,"./zoombar":54}],20:[function(require,module,exports){
var Logger;

module.exports = Logger = (function() {
  function Logger() {}

  Logger.prototype.setConsole = function(name) {
    return this.console = document.getElementById(name);
  };

  Logger.prototype.log = function(msg) {
    if (typeof this.console !== "undefined") {
      return this.console.innerHTML = msg;
    }
  };

  return Logger;

})();



},{}],21:[function(require,module,exports){
var DefaultMenu, FastaExporter, MenuBuilder;

MenuBuilder = require("./menubuilder.coffee");

FastaExporter = require("biojs-io-fasta").writer;

module.exports = DefaultMenu = (function() {
  function DefaultMenu(divName, msa) {
    this.divName = divName;
    this.msa = msa;
    this.menu = document.getElementById(this.divName);
    this.menu.className = "biojs_msa_menubar";
  }

  DefaultMenu.prototype.createMenu = function() {
    this.menu.appendChild(this._createFileSchemeMenu());
    this.menu.appendChild(this._createColorSchemeMenu());
    this.menu.appendChild(this._createOrderingMenu());
    this.menu.appendChild(this._createExportMenu());
    return this.menu.appendChild(document.createElement("p"));
  };

  DefaultMenu.prototype.deleteMenu = function() {
    return "a";
  };

  DefaultMenu.prototype._createFileSchemeMenu = function() {
    var menuFile;
    menuFile = new MenuBuilder("Settings");
    menuFile.addNode("Hide Marker", (function(_this) {
      return function() {
        if (_this.msa.config.visibleElements.ruler === true) {
          _this.msa.config.visibleElements.ruler = false;
        } else {
          _this.msa.config.visibleElements.ruler = true;
        }
        return _this.msa._draw();
      };
    })(this));
    menuFile.addNode("Hide Labels", (function(_this) {
      return function() {
        if (_this.msa.config.visibleElements.labels === true) {
          _this.msa.config.visibleElements.labels = false;
        } else {
          _this.msa.config.visibleElements.labels = true;
        }
        return _this.msa.redrawContainer();
      };
    })(this));
    return menuFile.buildDOM();
  };

  DefaultMenu.prototype._createExportMenu = function() {
    var menuExport;
    menuExport = new MenuBuilder("Export");
    menuExport.addNode("Export all", (function(_this) {
      return function() {
        return require(["saveAs"], function(saveAs) {
          var access, blob, text;
          access = function(seq) {
            return seq.tSeq;
          };
          text = FastaExporter["export"](_this.msa.seqs, access);
          blob = new Blob([text], {
            type: 'text/plain'
          });
          return saveAs(blob, "all.fasta");
        });
      };
    })(this));
    menuExport.addNode("Export selection", (function(_this) {
      return function() {
        return require(["saveAs"], function(saveAs) {
          var access, blob, selection, text;
          selection = _this.msa.selmanager.getInvolvedSeqs();
          if (selection == null) {
            selection = _this.msa.seqs;
            console.log("no selection found");
          }
          access = function(seq) {
            return seq.tSeq;
          };
          text = FastaExporter["export"](selection, access);
          blob = new Blob([text], {
            type: 'text/plain'
          });
          return saveAs(blob, "all.fasta");
        });
      };
    })(this));
    menuExport.addNode("Export image", (function(_this) {
      return function() {
        console.log("trying to render");
        return require(["html2canvas", "saveAs"], function(HTML2canvas, saveAs) {
          return HTML2canvas(_this.msa.container, {
            onrendered: function(canvas) {
              return canvas.toBlob(function(blob) {
                return saveAs(blob, "biojs-msa.png");
              }, "image/png");
            }
          });
        }, function() {
          return console.log("couldn't load HTML2canvas");
        });
      };
    })(this));
    return menuExport.buildDOM();
  };

  DefaultMenu.prototype._createColorSchemeMenu = function() {
    var menuColor;
    menuColor = new MenuBuilder("Color scheme");
    menuColor.addNode("Zappo", (function(_this) {
      return function(e) {
        _this.msa.colorscheme.setScheme("zappo");
        return _this.msa.stage.recolorStage();
      };
    })(this));
    menuColor.addNode("Taylor", (function(_this) {
      return function() {
        _this.msa.colorscheme.setScheme("taylor");
        return _this.msa.stage.recolorStage();
      };
    })(this));
    menuColor.addNode("Hydrophobicity", (function(_this) {
      return function() {
        _this.msa.colorscheme.setScheme("hydrophobicity");
        return _this.msa.stage.recolorStage();
      };
    })(this));
    return menuColor.buildDOM();
  };

  DefaultMenu.prototype._createOrderingMenu = function() {
    var menuOrdering;
    menuOrdering = new MenuBuilder("Ordering");
    menuOrdering.addNode("ID", (function(_this) {
      return function() {
        _this.msa.ordering.setType("numeric");
        return _this.msa.redrawContainer();
      };
    })(this));
    menuOrdering.addNode("ID Desc", (function(_this) {
      return function() {
        _this.msa.ordering.setType("reverse-numeric");
        return _this.msa.redrawContainer();
      };
    })(this));
    menuOrdering.addNode("Label", (function(_this) {
      return function() {
        _this.msa.ordering.setType("alphabetic");
        return _this.msa.redrawContainer();
      };
    })(this));
    menuOrdering.addNode("Label Desc", (function(_this) {
      return function() {
        _this.msa.ordering.setType("reverse-alphabetic");
        return _this.msa.redrawContainer();
      };
    })(this));
    return menuOrdering.buildDOM();
  };

  return DefaultMenu;

})();



},{"./menubuilder.coffee":23,"biojs-io-fasta":3}],22:[function(require,module,exports){
module.exports.defaultmenu = require("./defaultmenu");
module.exports.menubuilder = require("./menubuilder");

},{"./defaultmenu":21,"./menubuilder":23}],23:[function(require,module,exports){
var BMath, MenuBuilder;

BMath = require("../utils/bmath");

module.exports = MenuBuilder = (function() {
  function MenuBuilder(name) {
    this.name = name;
    this._nodes = [];
  }

  MenuBuilder.prototype.addNode = function(label, callback) {
    return this._nodes.push({
      label: label,
      callback: callback
    });
  };

  MenuBuilder.prototype.buildDOM = function() {
    var displayedButton, frag, li, menu, menuUl, node, _i, _len, _ref;
    menu = document.createElement("div");
    menu.className = "dropdown dropdown-tip";
    menu.id = "adrop-" + BMath.uniqueId();
    menuUl = document.createElement("ul");
    menuUl.className = "dropdown-menu";
    _ref = this._nodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      li = document.createElement("li");
      li.textContent = node.label;
      li.addEventListener("click", node.callback);
      menuUl.appendChild(li);
    }
    menu.appendChild(menuUl);
    frag = document.createDocumentFragment();
    displayedButton = document.createElement("a");
    displayedButton.textContent = this.name;
    displayedButton.setAttribute("data-dropdown", "#" + menu.id);
    displayedButton.className = "biojs_msa_menubar_alink";
    frag.appendChild(menu);
    frag.appendChild(displayedButton);
    return frag;
  };

  return MenuBuilder;

})();



},{"../utils/bmath":51}],24:[function(require,module,exports){
var CanvasStage, Colorator, DomStage, Eventhandler, Logger, MSA, Ordering, SeqMarker, SeqMgr, TilesStage, Utils, Zoomer, arrays, selection;

Colorator = require("./colorator");

Ordering = require("./ordering");

Utils = require("./utils/general");

Eventhandler = require("./eventhandler");

selection = require("./selection/index");

Zoomer = require("./zoomer");

SeqMgr = require("./seqmgr");

Logger = require("./logger");

DomStage = require("./stage/domStage");

CanvasStage = require("./stage/canvasStage");

TilesStage = require("./stage/tileStage");

SeqMarker = require("./seqmarker");

arrays = require("./utils/arrays");

module.exports = MSA = (function() {
  function MSA(divName, seqsInit, conf) {
    this._loadDefaultConfig(conf);
    if (typeof divName === "string") {
      this.container = document.getElementById(divName);
    } else {
      this.container = divName;
    }
    if (this.container.className == null) {
      this.container.className = "";
    }
    this.container.className += " biojs_msa_div";
    this.colorscheme = new Colorator();
    this.ordering = new Ordering();
    this.log = new Logger();
    this.events = new Eventhandler(this.log.log);
    this.selmanager = new selection.SelectionManager(this, this.events);
    this.zoomer = new Zoomer(this);
    this.seqs = [];
    this.seqmgr = new SeqMgr(this);
    this.plugs = {};
    this.plugsDOM = {};
    if (this.config.visibleElements.ruler) {
      this.marker = new SeqMarker(this);
      this.plugs["marker"] = this.marker;
    }
    if (this.config.speed) {
      this.stage = new TilesStage(this);
    } else {
      this.stage = new DomStage(this);
    }
    this.plugs["stage"] = this.stage;
    if (seqsInit != null) {
      this.addSeqs(seqsInit);
    }
    if (this.config.allowRectSelect) {
      this.plugs["rect_select"] = new selection.RectangularSelect(this);
    }
    if (this.config.registerMoveOvers) {
      this.container.addEventListener('mouseout', (function(_this) {
        return function() {
          return _this.selmanager.cleanup();
        };
      })(this));
    }
    this.container.addEventListener('dblclick', (function(_this) {
      return function() {
        return _this.selmanager.cleanup();
      };
    })(this));
  }

  MSA.prototype.addSeqs = function(tSeq) {
    this.stage.addSeqs(tSeq);
    return this._draw();
  };

  MSA.prototype.addPlugin = function(plugin, key) {
    this.plugs[key] = plugin;
    return this._draw();
  };

  MSA.prototype._draw = function() {
    var end, entry, frag, key, node, plugsSort, start, _i, _len;
    this._nMax = this.zoomer.getMaxLength(this.seqs);
    frag = document.createDocumentFragment();
    plugsSort = [];
    for (key in this.plugs) {
      plugsSort.push(key);
    }
    plugsSort.sort();
    for (_i = 0, _len = plugsSort.length; _i < _len; _i++) {
      key = plugsSort[_i];
      entry = this.plugs[key];
      start = new Date().getTime();
      node = entry.draw();
      end = new Date().getTime();
      console.log("Plugin[" + key + "] drawing time: " + (end - start) + " ms");
      if (node) {
        frag.appendChild(node);
        this.plugsDOM[key] = node;
      }
    }
    Utils.removeAllChilds(this.container);
    return this.container.appendChild(frag);
  };

  MSA.prototype.redraw = function(plugin) {
    var newDOM, plugDOM;
    newDOM = this.plugs[plugin].draw();
    plugDOM = this.plugsDOM[plugin];
    plugDOM.parentNode.replaceChild(newDOM, plugDOM);
    return this.plugsDOM[plugin] = newDOM;
  };

  MSA.prototype.redrawContainer = function() {
    this.plugs['stage'].reset();
    this._resetContainer();
    return this._draw();
  };

  MSA.prototype._resetContainer = function() {
    return Utils.removeAllChilds(this.container);
  };

  MSA.prototype._loadDefaultConfig = function(conf) {
    var defaultConf;
    this.config = conf;
    defaultConf = {
      visibleElements: {
        labels: true,
        seqs: true,
        menubar: true,
        ruler: true,
        features: false,
        allowRectSelect: false,
        speed: false
      },
      registerMoveOvers: false,
      autofit: true,
      keyevents: false,
      prerender: false
    };
    if (this.config != null) {
      return arrays.recursiveDictFiller(defaultConf, this.config);
    } else {
      return this.config = defaultConf;
    }
  };

  return MSA;

})();



},{"./colorator":16,"./eventhandler":17,"./logger":20,"./ordering":25,"./selection/index":28,"./seqmarker":36,"./seqmgr":37,"./stage/canvasStage":40,"./stage/domStage":41,"./stage/tileStage":47,"./utils/arrays":50,"./utils/general":52,"./zoomer":55}],25:[function(require,module,exports){
var Ordering,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = Ordering = (function() {
  function Ordering() {
    this.getSeqOrder = __bind(this.getSeqOrder, this);
    this.type = "numeric";
  }

  Ordering.prototype.setType = function(type) {
    this.type = type;
  };

  Ordering.prototype.getSeqOrder = function(seqs) {
    return Ordering.orderSeqsAfterScheme(seqs, this.type);
  };

  Ordering.prototype.setOrdering = function(seqOrdering) {
    this.type = "own";
    return this.seqOrdering = seqOrdering;
  };

  Ordering.orderSeqsAfterScheme = function(seqs, type) {
    var i, ordering, seq, tuples;
    ordering = [];
    if (type === "numeric") {
      for (seq in seqs) {
        ordering.push(seqs[seq].tSeq.id);
      }
    } else if (type === "reverse-numeric") {
      for (seq in seqs) {
        ordering.unshift(seqs[seq].tSeq.id);
      }
    } else if (type === "alphabetic") {
      tuples = Ordering.sortSeqArrayAlphabetically(seqs);
      i = 0;
      while (i < tuples.length) {
        ordering.push(tuples[i][0]);
        i++;
      }
    } else if (type === "reverse-alphabetic") {
      tuples = Ordering.sortSeqArrayAlphabetically(seqs);
      i = 0;
      while (i < tuples.length) {
        ordering.unshift(tuples[i][0]);
        i++;
      }
    } else if (type === "own") {
      ordering = this.seqOrdering;
    }
    if (ordering.length === 0) {
      return console.log("invalid type selected");
    } else {
      return ordering;
    }
  };

  Ordering.sortSeqArrayAlphabetically = function(seqs) {
    var key, tuples;
    tuples = [];
    for (key in seqs) {
      tuples.push(key);
    }
    tuples.sort(function(a, b) {
      var nameA, nameB;
      nameA = a[1];
      nameB = b[1];
      if (nameA < nameB) {
        return -1;
      } else if (nameA > nameB) {
        return 1;
      } else {
        return 0;
      }
    });
    return tuples;
  };

  return Ordering;

})();



},{}],26:[function(require,module,exports){
module.exports = function (tSeq, layer){
  this.tSeq = tSeq;
  this.layer = layer;
};

},{}],27:[function(require,module,exports){
var HorizontalSelection, Selection,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Selection = require("./selection");

module.exports = HorizontalSelection = (function(_super) {
  __extends(HorizontalSelection, _super);

  function HorizontalSelection(msa, id) {
    this.msa = msa;
    this.id = id;
    this.deselect = __bind(this.deselect, this);
    this.select = __bind(this.select, this);
    void 0;
  }

  HorizontalSelection.prototype.getId = function() {
    return "h" + this.id;
  };

  HorizontalSelection.prototype.select = function() {
    this._selectLabel(this.msa.colorscheme.colorSelectedLabel);
    return this._selectResidues(this.msa.colorscheme.colorSelectedResidue);
  };

  HorizontalSelection.prototype.deselect = function() {
    this._selectLabel(this.msa.colorscheme.colorLabel);
    return this._selectResidues(this.msa.colorscheme.colorResidue);
  };

  HorizontalSelection.prototype._selectLabel = function(colorCall) {
    var currentLayerLabel, tSeq;
    if (this.msa.seqs[this.id] == null) {
      return console.log("warning, could not find a sequence");
    } else {
      tSeq = this.msa.seqs[this.id].tSeq;
      currentLayerLabel = this.msa.seqs[this.id].layer.childNodes[0];
      return colorCall(currentLayerLabel, tSeq);
    }
  };

  HorizontalSelection.prototype._selectResidues = function(colorCall) {
    var child, childs, currentLayer, i, tSeq, _i, _len, _results;
    if (this.msa.seqs[this.id] == null) {
      return console.log("warning, could not find a sequence");
    } else {
      currentLayer = this.msa.seqs[this.id].layer;
      tSeq = this.msa.seqs[this.id].tSeq;
      childs = currentLayer.childNodes[1].childNodes;
      _results = [];
      for (i = _i = 0, _len = childs.length; _i < _len; i = ++_i) {
        child = childs[i];
        _results.push(colorCall(child, tSeq, i));
      }
      return _results;
    }
  };

  return HorizontalSelection;

})(Selection);



},{"./selection":32}],28:[function(require,module,exports){
module.exports.VerticalSelection = require("./vertical_selection");
module.exports.HorizontalSelection = require("./horizontal_selection");
module.exports.RegionSelect = require("./region_select"); 

module.exports.PositionSelect = require("./position_selection");
module.exports.SelectionManager = require("./selection_manager");
module.exports.SelectionList = require("./selectionlist");

module.exports.RectangularSelect = require("./rectangular_select");

},{"./horizontal_selection":27,"./position_selection":29,"./rectangular_select":30,"./region_select":31,"./selection_manager":33,"./selectionlist":34,"./vertical_selection":35}],29:[function(require,module,exports){
var PositionSelection, Selection,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Selection = require("./selection");

module.exports = PositionSelection = (function(_super) {
  __extends(PositionSelection, _super);

  function PositionSelection(msa, id, column) {
    this.msa = msa;
    this.id = id;
    this.column = column;
    this.deselect = __bind(this.deselect, this);
    this.select = __bind(this.select, this);
    if ((this.id == null) || (this.column == null)) {
      throw new Error("invalid selection coordinates");
    }
  }

  PositionSelection.prototype.getId = function() {
    return "x" + this.id + "y" + this.column;
  };

  PositionSelection.prototype.select = function() {
    var singleResidue, tSeq;
    tSeq = this.msa.seqs[this.id].tSeq;
    if (this.msa.seqs[this.id].layer.children[1] != null) {
      singleResidue = this.msa.seqs[this.id].layer.children[1].children[this.column];
    } else {
      singleResidue = this.msa.seqs[this.id].layer.children[0].children[this.column];
    }
    return this.msa.colorscheme.colorSelectedResidueSingle(singleResidue, tSeq, this.column);
  };

  PositionSelection.prototype.deselect = function() {
    var posY, singlePos, tSeq;
    posY = this.msa.seqs[this.id];
    if (posY.layer.childNodes[1] != null) {
      singlePos = posY.layer.childNodes[1].childNodes[this.column];
    } else {
      singlePos = posY.layer.childNodes[0].childNodes[this.column];
    }
    tSeq = posY.tSeq;
    return this.msa.colorscheme.colorResidue(singlePos, tSeq, this.column);
  };

  return PositionSelection;

})(Selection);



},{"./selection":32}],30:[function(require,module,exports){
var RectangularSelect,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = RectangularSelect = (function() {
  function RectangularSelect(msa) {
    this.msa = msa;
    this.onMouseUp = __bind(this.onMouseUp, this);
    this.onMouseMove = __bind(this.onMouseMove, this);
    this.onMouseDown = __bind(this.onMouseDown, this);
    this.calcMatches = __bind(this.calcMatches, this);
    this.x1 = this.y1 = this.x2 = this.y2 = 0;
    this.container = this.createElement();
  }

  RectangularSelect.prototype.createElement = function() {
    this.rectangularSelect = document.createElement("div");
    this.rectangularSelect.className = "biojs-rectangular-select";
    this.rectangularSelect.hidden = 1;
    this.msa.container.addEventListener('mousemove', this.onMouseMove);
    this.msa.container.addEventListener('mousedown', this.onMouseDown);
    this.msa.container.addEventListener('mouseup', this.onMouseUp);
    return this.rectangularSelect;
  };

  RectangularSelect.prototype.draw = function() {
    return this.container;
  };

  RectangularSelect.prototype.calcRectangle = function() {
    var x3, x4, y3, y4;
    x3 = Math.min(this.x1, this.x2);
    x4 = Math.max(this.x1, this.x2);
    y3 = Math.min(this.y1, this.y2);
    y4 = Math.max(this.y1, this.y2);
    this.rectangularSelect.style.left = x3 + 'px';
    this.rectangularSelect.style.top = y3 + 'px';
    this.rectangularSelect.style.width = x4 - x3 + 'px';
    return this.rectangularSelect.style.height = y4 - y3 + 'px';
  };

  RectangularSelect.prototype.calcMatches = function() {
    var bodyRect, colHeight, elemRect, height, offsetX, offsetY, p1x, p1y, p2x, p2y, width, x3, x4, y3, y4;
    bodyRect = document.body.getBoundingClientRect();
    elemRect = this.msa.container.getBoundingClientRect();
    offsetY = elemRect.top - bodyRect.top;
    offsetX = elemRect.left - bodyRect.left;
    width = elemRect.right - elemRect.left;
    height = elemRect.bottom - elemRect.top;
    console.log("offsetX:" + offsetX + ", offsetY:" + offsetY);
    x3 = Math.min(this.x1, this.x2);
    x4 = Math.max(this.x1, this.x2);
    y3 = Math.min(this.y1, this.y2);
    y4 = Math.max(this.y1, this.y2);
    console.log("x1:" + x3 + ", y1:" + y3);
    console.log("x2:" + x4 + ", y2:" + y4);
    y3 -= offsetY;
    y4 -= offsetY;
    x3 -= offsetX;
    x4 -= offsetX;
    console.log("x1:" + x3 + ", y1:" + y3);
    console.log("x2:" + x4 + ", y2:" + y4);
    if (x3 < 0 || y3 < 0) {
      return;
    }
    if (x4 > width || x3 > width || y3 > height || y4 > height) {
      return;
    }
    console.log("valid selection");
    x3 -= this.msa.seqOffset;
    x4 -= this.msa.seqOffset;
    p1x = x3 / this.msa.columnWidth;
    p2x = x4 / this.msa.columnWidth;
    colHeight = this.msa.columnHeight + this.msa.columSpacing;
    p1y = y3 / colHeight;
    p2y = y4 / colHeight;
    console.log("px1:" + p1x + ", py1:" + p1y);
    return console.log("px2:" + p2x + ", py2:" + p2y);
  };

  RectangularSelect.prototype.onMouseDown = function(e) {
    this.rectangularSelect.hidden = 0;
    this.x1 = e.pageX;
    this.y1 = e.pageY;
    this.calcRectangle();
    return e.preventDefault();
  };

  RectangularSelect.prototype.onMouseMove = function(e) {
    this.x2 = e.pageX;
    this.y2 = e.pageY;
    this.calcRectangle();
    return e.preventDefault();
  };

  RectangularSelect.prototype.onMouseUp = function() {
    console.log("out");
    this.calcMatches();
    return this.rectangularSelect.hidden = 1;
  };

  return RectangularSelect;

})();



},{}],31:[function(require,module,exports){
var RegionSelect,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = RegionSelect = (function() {
  function RegionSelect(msa, _y, _column, _width, _height) {
    this.msa = msa;
    this._y = _y;
    this._column = _column;
    this._width = _width;
    this._height = _height;
    this.deselect = __bind(this.deselect, this);
    this.select = __bind(this.select, this);
    if ((this._y == null) || (this._column == null)) {
      throw new Error("invalid selection coordinates");
    }
  }

  RegionSelect.prototype.getId = function() {
    return "x{@_id}y{@_column}w{@_width}h{@_height}";
  };

  RegionSelect.prototype.select = function() {
    return this._selectResidues(this.msa.colorscheme.colorSelectedResidueSingle);
  };

  RegionSelect.prototype.deselect = function() {
    return this._selectResidues(this.msa.colorscheme.colorResidue);
  };

  RegionSelect.prototype._selectResidues = function(colorCall) {
    var col, curSeq, row, singleResidue, _i, _ref, _results;
    _results = [];
    for (row = _i = x, _ref = x + this._height; x <= _ref ? _i <= _ref : _i >= _ref; row = x <= _ref ? ++_i : --_i) {
      curSeq = this.msa.seqs[this._id];
      _results.push((function() {
        var _j, _ref1, _ref2, _results1;
        _results1 = [];
        for (col = _j = _ref1 = this._column, _ref2 = this._column + this._width; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; col = _ref1 <= _ref2 ? ++_j : --_j) {
          singleResidue = curSeq.layer.children[1].children[this._column];
          this.msa.colorscheme.colorResidue(singleResidue, curSeq.tSeq, col);
          _results1.push(console.log(singleResidue));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  return RegionSelect;

})();



},{}],32:[function(require,module,exports){
var Selection;

module.exports = Selection = (function() {
  function Selection(msa) {
    this.msa = msa;
    this;
  }

  return Selection;

})();



},{}],33:[function(require,module,exports){
var SelectionList, SelectionManager;

SelectionList = require("./selectionlist");

module.exports = SelectionManager = (function() {
  function SelectionManager(msa, eventhandler) {
    this.msa = msa;
    this.eventhandler = eventhandler;
  }

  SelectionManager.prototype.changeSel = function(sel) {
    if (this.currentSelection != null) {
      this.currentSelection.deselect();
    }
    this.currentSelection = sel;
    if (sel != null) {
      sel.select();
    }
    return this.eventhandler.onSelectionChanged(sel);
  };

  SelectionManager.prototype.handleSel = function(sel, evt) {
    var selList, _ref;
    if (evt.ctrlKey || evt.metaKey) {
      if (((_ref = this.currentSelection) != null ? _ref.isList : void 0) != null) {
        selList = this.currentSelection;
        this.currentSelection = void 0;
      } else {
        selList = new SelectionList();
      }
      selList.addSelection(sel);
      sel = selList;
    }
    return this.changeSel(sel);
  };

  SelectionManager.prototype.cleanup = function() {
    return this.changeSel(void 0);
  };

  SelectionManager.prototype.getInvolvedSeqs = function() {
    var key, name, sel, seqs, _ref;
    if (this.currentSelection != null) {
      name = this.currentSelection.__proto__.constructor.name;
      if (name === "VerticalSelection") {
        return this.msa.seqs;
      }
      if (name === "HorizontalSelection" || name === "PositionSelection") {
        return [this.msa.seqs[this.currentSelection.id]];
      }
      if (name === "SelectionList") {
        seqs = [];
        _ref = this.currentSelection._sels;
        for (key in _ref) {
          sel = _ref[key];
          name = sel.__proto__.constructor.name;
          if (name === "HorizontalSelection" || name === "PositionSelection") {
            seqs.push(this.msa.seqs[sel.id]);
          }
        }
        return seqs;
      }
    } else {
      console.log("no involved seqs");
      return void 0;
    }
  };

  return SelectionManager;

})();



},{"./selectionlist":34}],34:[function(require,module,exports){
var SelectionList;

module.exports = SelectionList = (function() {
  SelectionList.prototype.isList = true;

  function SelectionList() {
    this._sels = {};
  }

  SelectionList.prototype.addSelection = function(sel) {
    var eId;
    eId = sel.getId();
    if (this._sels[eId] != null) {
      sel.deselect();
      return delete this._sels[eId];
    } else {
      this._sels[eId] = sel;
      return sel.select();
    }
  };

  SelectionList.prototype.select = function() {
    return void 0;
  };

  SelectionList.prototype.deselect = function() {
    var key, value, _ref, _results;
    _ref = this._sels;
    _results = [];
    for (key in _ref) {
      value = _ref[key];
      _results.push(value.deselect());
    }
    return _results;
  };

  return SelectionList;

})();



},{}],35:[function(require,module,exports){
var Selection, VerticalSelection,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Selection = require("./selection");

module.exports = VerticalSelection = (function(_super) {
  __extends(VerticalSelection, _super);

  function VerticalSelection(msa, column, _labelColumn) {
    this.msa = msa;
    this.column = column;
    this._labelColumn = _labelColumn;
    if (this._labelColumn == null) {
      this._labelColumn = this.column;
    }
  }

  VerticalSelection.prototype.getId = function() {
    return "v" + this.column;
  };

  VerticalSelection.prototype.select = function() {
    this._selectLabel(this.msa.colorscheme.colorSelectedColumn);
    return this._selectResidues(this.msa.colorscheme.colorSelectedResidueColumn);
  };

  VerticalSelection.prototype.deselect = function() {
    this._selectLabel(this.msa.colorscheme.colorColumn);
    return this._selectResidues(this.msa.colorscheme.colorResidue);
  };

  VerticalSelection.prototype._selectLabel = function(colorCall) {
    var columnGroup, _ref;
    if (((_ref = this.msa.marker._seqMarkerLayer) != null ? _ref.childNodes[this._labelColumn] : void 0) != null) {
      columnGroup = this.msa.marker._seqMarkerLayer.childNodes[this._labelColumn];
      return colorCall(columnGroup, this._labelColumn);
    } else {
      return console.log("warning.");
    }
  };

  VerticalSelection.prototype._selectResidues = function(colorCall) {
    var key, seq, singlePos, _ref, _results;
    _ref = this.msa.seqs;
    _results = [];
    for (key in _ref) {
      seq = _ref[key];
      singlePos = seq.layer.children[1].childNodes[this.column];
      _results.push(colorCall(singlePos, seq.tSeq, singlePos.rowPos));
    }
    return _results;
  };

  return VerticalSelection;

})(Selection);



},{"./selection":32}],36:[function(require,module,exports){
var SeqMarker, Utils, selection;

Utils = require("./utils/general");

selection = require("./selection");

module.exports = SeqMarker = (function() {
  function SeqMarker(msa) {
    this.msa = msa;
    this._seqMarkerLayer = document.createElement("div");
    this._seqMarkerLayer.className = "biojs_msa_marker";
  }

  SeqMarker.prototype.draw = function() {
    var n, nMax, residueGroup, residueSpan, spacePerCell, specialCounter, stepSize;
    Utils.removeAllChilds(this._seqMarkerLayer);
    if (!this.msa.config.visibleElements.ruler) {
      return void 0;
    } else {
      if (!this.msa.config.visibleElements.labels) {
        this._seqMarkerLayer.style.paddingLeft = "0px";
      } else {
        this._seqMarkerLayer.style.paddingLeft = "" + this.msa.zoomer.seqOffset + "px";
      }
      spacePerCell = this.columnHeight + this.columnSpacing;
      residueGroup = document.createDocumentFragment();
      stepSize = this.msa.zoomer.getStepSize();
      n = 0;
      nMax = this.msa.zoomer.len;
      if (nMax === 0) {
        nMax = this.msa.zoomer.getMaxLength;
      }
      if (this.msa.plugs.marker.specials != null) {
        specialCounter = 0;
      } else {
        specialCounter = -1;
      }
      while (n < nMax) {
        residueSpan = document.createElement("span");
        residueSpan.textContent = n;
        residueSpan.style.width = this.msa.zoomer.columnWidth * stepSize + "px";
        residueSpan.style.display = "inline-block";
        residueSpan.rowPos = n;
        residueSpan.stepPos = n / stepSize;
        residueSpan.addEventListener("click", (function(_this) {
          return function(evt) {
            return _this.msa.selmanager.handleSel(new selection.VerticalSelection(_this.msa, evt.target.rowPos, evt.target.stepPos), evt);
          };
        })(this), false);
        if (this.msa.config.registerMoveOvers) {
          residueSpan.addEventListener("mouseover", ((function(_this) {
            return function(evt) {
              return _this.msa.selmanager.changeSel(new selection.VerticalSelection(_this.msa, evt.target.rowPos, evt.target.stepPos), evt);
            };
          })(this)), false);
        }
        if (specialCounter !== -1) {
          if (this.msa.plugs.marker.specials[specialCounter] === n) {
            residueSpan.className = "biojs_msa_marker-special";
            specialCounter++;
          }
        }
        this.msa.colorscheme.colorColumn(residueSpan, n);
        residueGroup.appendChild(residueSpan);
        n += stepSize;
      }
      this._seqMarkerLayer.appendChild(residueGroup);
      return this._seqMarkerLayer;
    }
  };

  return SeqMarker;

})();



},{"./selection":28,"./utils/general":52}],37:[function(require,module,exports){
var BMath, Row, SeqManager, Sequence, Utils, selection;

Sequence = require("biojs-model").seq;

Row = require("./row");

selection = require("./selection/index");

BMath = require("./utils/bmath");

Utils = require("./utils/general");

module.exports = SeqManager = (function() {
  function SeqManager(msa) {
    this.msa = msa;
    void 0;
  }

  SeqManager._generateSequence = function(len) {
    var i, possible, text, _i, _ref;
    text = "";
    possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    for (i = _i = 0, _ref = len - 1; _i <= _ref; i = _i += 1) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
  };

  SeqManager.getDummySequences = function(len, seqLen) {
    var i, seqs, _i, _ref;
    seqs = [];
    if (len == null) {
      len = BMath.getRandomInt(3, 5);
    }
    if (seqLen == null) {
      seqLen = BMath.getRandomInt(50, 200);
    }
    for (i = _i = 0, _ref = len - 1; _i <= _ref; i = _i += 1) {
      seqs.push(new Sequence(SeqManager._generateSequence(seqLen), "seq" + i, i));
    }
    return seqs;
  };

  SeqManager.prototype.addDummySequences = function(len, seqLen) {
    this.msa.addSeqs(SeqManager.getDummySequences(len, seqLen));
    return this.msa._draw();
  };

  return SeqManager;

})();



},{"./row":26,"./selection/index":28,"./utils/bmath":51,"./utils/general":52,"biojs-model":14}],38:[function(require,module,exports){
var FeatureElement, StageElement, Utils, selection,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require("../utils/general");

selection = require("../selection/index");

StageElement = require("./StageElement");

module.exports = FeatureElement = (function(_super) {
  __extends(FeatureElement, _super);

  function FeatureElement(msa) {
    this.msa = msa;
    void 0;
  }

  FeatureElement.prototype.width = function(n) {
    return 0;
  };

  FeatureElement.prototype.redraw = function(el, row, textVisibilityChanged) {
    var foo, parentNode;
    parentNode = row.layer;
    console.log("redrawing");
    foo = this.create(row);
    return parentNode.replaceChild(foo, el);
  };

  FeatureElement.prototype.create = function(row) {
    var feature, featureSpan, features, labelOffset, occ, occLength, occs, rect, residueGroup, rowSpan, rowsNeeded, seqLen, tSeq, x, _i, _j, _k, _len, _len1, _len2, _ref;
    tSeq = row.tSeq;
    features = tSeq.features;
    featureSpan = document.createElement("span");
    if ((features != null) && (features != null ? features.length : void 0) > 0) {
      features = FeatureElement.sortFeatureArray(features);
      seqLen = tSeq.seq.length;
      rowsNeeded = FeatureElement.getMinRows(features, seqLen);
      occs = (function() {
        var _i, _results;
        _results = [];
        for (x = _i = 1; 1 <= rowsNeeded ? _i <= rowsNeeded : _i >= rowsNeeded; x = 1 <= rowsNeeded ? ++_i : --_i) {
          _results.push(document.createDocumentFragment());
        }
        return _results;
      })();
      for (_i = 0, _len = features.length; _i < _len; _i++) {
        feature = features[_i];
        rect = this.drawRectangle(feature);
        for (_j = 0, _len1 = occs.length; _j < _len1; _j++) {
          occ = occs[_j];
          occLength = occ.childNodes.length;
          if (occLength === 0 || ((_ref = occ.childNodes[occLength - 1]) != null ? _ref.xEnd : void 0) < feature.xStart) {
            if (occLength > 0) {
              rect.style.marginLeft = "" + (this.msa.zoomer.columnWidth * (feature.xStart - 1 - occ.childNodes[occLength - 1].xEnd)) + "px";
            } else if (occLength === 0) {
              rect.style.marginLeft = "" + (this.msa.zoomer.columnWidth * feature.xStart) + "px";
            }
            occ.appendChild(rect);
            break;
          }
        }
      }
      residueGroup = document.createDocumentFragment();
      for (_k = 0, _len2 = occs.length; _k < _len2; _k++) {
        occ = occs[_k];
        rowSpan = document.createElement("span");
        rowSpan.className = "biojs-msa-feature-row";
        if (this.msa.config.visibleElements.labels) {
          labelOffset = document.createElement("span");
          labelOffset.style.width = "" + this.msa.zoomer.seqOffset + "px";
          rowSpan.appendChild(labelOffset);
        }
        rowSpan.appendChild(occ);
        residueGroup.appendChild(rowSpan);
      }
      featureSpan.className = "biojs-msa-feature";
      featureSpan.appendChild(residueGroup);
    }
    return featureSpan;
  };

  FeatureElement.prototype.drawRectangle = function(feature) {
    var bgColor, borderColor, residueSpan, _ref;
    residueSpan = document.createElement("span");
    if (((_ref = feature.text) != null ? _ref.length : void 0) > 0) {
      residueSpan.textContent = feature.text;
    } else {
      residueSpan.textContent = "#";
    }
    bgColor = Utils.hex2rgb(feature.fillColor);
    residueSpan.style.backgroundColor = Utils.rgba(bgColor, feature.fillOpacity);
    residueSpan.bgColor = bgColor;
    borderColor = feature.borderColor;
    residueSpan.style.border = "" + feature.borderSize + "px solid " + borderColor;
    residueSpan.style.width = "" + (this.msa.zoomer.columnWidth * (feature.xEnd - feature.xStart + 1)) + "px";
    residueSpan.style.fontSize = "" + this.msa.zoomer.residueFontsize + "px";
    residueSpan.xEnd = feature.xEnd;
    residueSpan.addEventListener("mouseover", function() {
      var opacity;
      opacity = 1;
      return this.style.backgroundColor = Utils.rgba(this.bgColor, opacity);
    });
    residueSpan.addEventListener("mouseout", function() {
      var opacity;
      opacity = 0.5;
      return this.style.backgroundColor = Utils.rgba(this.bgColor, opacity);
    });
    return residueSpan;
  };

  FeatureElement.sortFeatureArray = function(arr) {
    var compare;
    compare = function(a, b) {
      if (a.xStart < b.xStart) {
        return -1;
      } else if (a.xStart > b.xStart) {
        return 1;
      }
    };
    return arr.sort(compare);
  };

  FeatureElement.getMinRows = function(features, seqLen) {
    var feature, max, occs, x, _i, _j, _k, _len, _ref, _ref1, _ref2;
    occs = (function() {
      var _i, _results;
      _results = [];
      for (x = _i = 1; 1 <= seqLen ? _i <= seqLen : _i >= seqLen; x = 1 <= seqLen ? ++_i : --_i) {
        _results.push(0);
      }
      return _results;
    })();
    for (_i = 0, _len = features.length; _i < _len; _i++) {
      feature = features[_i];
      for (x = _j = _ref = feature.xStart, _ref1 = feature.xEnd; _j <= _ref1; x = _j += 1) {
        occs[x]++;
      }
    }
    max = 0;
    for (x = _k = 0, _ref2 = seqLen - 1; _k <= _ref2; x = _k += 1) {
      if (occs[x] > max) {
        max = occs[x];
      }
    }
    return max;
  };

  return FeatureElement;

})(StageElement);



},{"../selection/index":28,"../utils/general":52,"./StageElement":39}],39:[function(require,module,exports){
var StageElement;

module.exports = StageElement = (function() {
  function StageElement(msa) {
    this.msa = msa;
    void 0;
  }

  StageElement.prototype.width = function(n) {
    return 0;
  };

  StageElement.prototype.redraw = function(el, row, textVisibilityChanged) {
    return void 0;
  };

  StageElement.prototype.create = function(row) {
    return void 0;
  };

  return StageElement;

})();



},{}],40:[function(require,module,exports){
var CanvasStage, Utils, stage,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require("../utils/general");

stage = require("../stage/index");

module.exports = CanvasStage = (function(_super) {
  __extends(CanvasStage, _super);

  function CanvasStage(msa) {
    this.msa = msa;
    this.msa.zoomer.setZoomLevel(1);
  }

  CanvasStage.prototype.width = function() {
    return 0;
  };

  CanvasStage.prototype.draw = function() {
    var color, colorArr, colors, el, height, index, key, keys, pos, pre, residue, seq, seqs, singleColor, start, value, width, _i, _j, _len, _ref, _ref1, _ref2;
    if (false) {
      console.log("canvas is there");
    } else {
      this._createCanvas();
      colors = {};
      CanvasStage.taylorColors.undef = "444444";
      keys = CanvasStage.taylorColors;
      start = new Date().getTime();
      for (key in CanvasStage.taylorColors) {
        colors[key] = [];
      }
      pos = 0;
      seqs = this.msa.seqs.slice(0, 1999);
      console.log(seqs[0].tSeq.name);
      for (key in seqs) {
        value = seqs[key];
        seq = value.tSeq.seq;
        pre = "?";
        width = 1;
        for (index = _i = 0, _ref = seq.length - 1; _i <= _ref; index = _i += 1) {
          el = seq[index];
          if (pre === el) {
            width += 1;
          } else {
            colorArr = colors[pre];
            if (colorArr === void 0) {
              pre = "?";
            }
            if (pre !== "?") {
              colorArr.push([pos, index - width, width]);
            }
            pre = el;
            width = 1;
          }
        }
        pos = pos + 1;
      }
      console.log("Calc rects: " + (new Date().getTime() - start) + " ms");
      start = new Date().getTime();
      height = this.msa.zoomer.columnHeight;
      width = this.msa.zoomer.columnWidth;
      _ref1 = CanvasStage.taylorColors;
      for (residue in _ref1) {
        color = _ref1[residue];
        this.ctx.fillStyle = "#" + color;
        _ref2 = colors[residue];
        for (_j = 0, _len = _ref2.length; _j < _len; _j++) {
          singleColor = _ref2[_j];
          if (singleColor != null) {
            this.ctx.fillRect(singleColor[1] * width, singleColor[0] * height, singleColor[2] * width, height);
          }
        }
      }
      console.log("Draw rects: " + (new Date().getTime() - start) + " ms");
    }
    return this.canvasWrapper;
  };

  CanvasStage.prototype.drawSeq = function(row) {
    var index, tSeq, _i, _ref, _results;
    tSeq = row.tSeq.seq;
    this.pos += 2;
    this.ctx.fillStyle = "#ff0000";
    _results = [];
    for (index = _i = 0, _ref = tSeq.length - 1; _i <= _ref; index = _i += 1) {
      this.ctx.fillStyle = "#" + CanvasStage.taylorColors[tSeq[index]];
      _results.push(this.ctx.fillRect(index, this.pos, 1, 1));
    }
    return _results;
  };

  CanvasStage.prototype._createCanvas = function() {
    this.canvas = document.createElement("canvas");
    this.canvas.width = this.msa.zoomer.getMaxLength();
    this.canvas.height = this.msa.seqs.length;
    this.canvas.height = 1000;
    this.ctx = this.canvas.getContext("2d");
    this.canvas.setAttribute("id", "" + this.globalID + "_canvas");
    this.canvasWrapper = document.createElement("div");
    this.canvasWrapper.appendChild(this.canvas);
    this.canvasWrapper.style.overflow = "scroll";
    return this.canvasWrapper.style.height = "500px";
  };

  CanvasStage.taylorColors = {
    V: "99ff00",
    I: "66ff00",
    L: "33ff00",
    F: "00ff66",
    Y: "00ffcc",
    W: "00ccff",
    H: "0066ff",
    R: "0000ff",
    K: "6600ff",
    N: "cc00ff",
    Q: "ff00cc",
    E: "ff0066",
    D: "ff0000",
    S: "ff3300",
    T: "ff6600",
    G: "ff9900",
    P: "ffcc00",
    C: "ffff00"
  };

  return CanvasStage;

})(stage.stage);



},{"../stage/index":42,"../utils/general":52}],41:[function(require,module,exports){
var DomStage, Utils, stage,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require("../utils/general");

stage = require("../stage/index");

module.exports = DomStage = (function(_super) {
  __extends(DomStage, _super);

  function DomStage(msa) {
    this.msa = msa;
    this.recolorStage = __bind(this.recolorStage, this);
    this.elements = [];
    this._createElements();
  }

  DomStage.prototype._createElements = function() {
    this.elements = [];
    if (this.msa.config.visibleElements.labels) {
      this.elements.push(new stage.labelElement(this.msa));
    }
    if (this.msa.config.visibleElements.seqs) {
      this.elements.push(new stage.seqElement(this.msa));
    }
    if (this.msa.config.visibleElements.features) {
      return this.elements.push(new stage.featureElement(this.msa));
    }
  };

  DomStage.prototype._createContainer = function() {
    this.canvas = document.createElement("div");
    this.canvas.setAttribute("id", "" + this.globalID + "_canvas");
    return this.canvas.setAttribute("class", "biojs_msa_stage");
  };

  DomStage.prototype.reset = function() {
    Utils.removeAllChilds(this.canvas);
    return this._createElements();
  };

  DomStage.prototype.drawSeq = function(row) {
    var el, layer, _i, _len, _ref;
    layer = document.createElement("div");
    _ref = this.elements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      layer.appendChild(el.create(row));
    }
    layer.className = "biojs_msa_layer";
    return row.layer = layer;
  };

  DomStage.prototype.draw = function() {
    var end, frag, i, id, orderList, start, _i, _ref, _ref1;
    if (((_ref = this.canvas) != null ? _ref.childNodes.length : void 0) > 0) {
      this.recolorStage();
    } else {
      this._createContainer();
      start = new Date().getTime();
      this.drawSeqs();
      end = new Date().getTime();
      console.log("Stage draw time: " + (end - start) + " ms");
      orderList = this.msa.ordering.getSeqOrder(this.msa.seqs);
      if (orderList == null) {
        console.log("empty seq stage");
        return;
      }
      if (orderList.length !== Object.size(this.msa.seqs)) {
        console.log("Length of the input array " + orderList.length + " does not match with the real world " + Object.size(this.msa.seqs));
        return;
      }
      frag = document.createDocumentFragment();
      for (i = _i = 0, _ref1 = orderList.length - 1; _i <= _ref1; i = _i += 1) {
        id = orderList[i];
        this.msa.seqs[id].layer.style.paddingTop = "" + this.msa.zoomer.columnSpacing + "px";
        frag.appendChild(this.msa.seqs[id].layer);
      }
      this.canvas.appendChild(frag);
    }
    return this.canvas;
  };

  DomStage.prototype.recolorStage = function() {
    var curRow, currentLayer, i, key, textVisibilityChanged, _ref, _results;
    this.msa.selmanager.cleanup();
    textVisibilityChanged = false;
    if (this.internalTextDisplay !== this.msa.zoomer.isTextVisible()) {
      textVisibilityChanged = true;
      this.internalTextDisplay = this.msa.zoomer.isTextVisible();
    }
    _ref = this.msa.seqs;
    _results = [];
    for (key in _ref) {
      curRow = _ref[key];
      currentLayer = curRow.layer;
      _results.push((function() {
        var _i, _ref1, _results1;
        _results1 = [];
        for (i = _i = 0, _ref1 = this.elements.length - 1; _i <= _ref1; i = _i += 1) {
          if (currentLayer.childNodes[i] != null) {
            _results1.push(this.elements[i].redraw(currentLayer.childNodes[i], curRow, textVisibilityChanged));
          } else {
            _results1.push(console.log("a plugin wasn't loaded yet."));
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  return DomStage;

})(stage.stage);



},{"../stage/index":42,"../utils/general":52}],42:[function(require,module,exports){
module.exports.stage = require("./stage");
module.exports.seqElement = require("./seqElement");
module.exports.labelElement = require("./labelElement");
module.exports.featureElement = require("./FeatureElement");

},{"./FeatureElement":38,"./labelElement":43,"./seqElement":44,"./stage":45}],43:[function(require,module,exports){
var LabelElement, StageElement, Utils, selection,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require("../utils/general");

selection = require("../selection/index");

StageElement = require("./StageElement");

module.exports = LabelElement = (function(_super) {
  __extends(LabelElement, _super);

  function LabelElement(msa) {
    this.msa = msa;
    void 0;
  }

  LabelElement.prototype.width = function(n) {
    return this.msa.zoomer.seqOffset;
  };

  LabelElement.prototype._setLabelPosition = function(label, tSeq) {
    label.style.width = "" + this.msa.zoomer.seqOffset + "px";
    label.style.height = "" + this.msa.zoomer.columnHeight + "px";
    label.style.fontSize = "" + this.msa.zoomer.labelFontsize + "px";
    if (this.msa.zoomer.isTextVisible()) {
      label.textContent = tSeq.name;
    } else {
      label.textContent = "";
    }
    if ((tSeq.special != null) === true) {
      label.className += " biojs_msa_labels-special";
    }
    return this.msa.colorscheme.colorLabel(label, tSeq);
  };

  LabelElement.prototype.redraw = function(el, row, textVisibilityChanged) {
    return this._setLabelPosition(el, row.tSeq);
  };

  LabelElement.prototype.create = function(row) {
    var labelGroup, tSeq;
    tSeq = row.tSeq;
    labelGroup = document.createElement("span");
    labelGroup.seqid = tSeq.id;
    labelGroup.className = "biojs_msa_labels";
    this._setLabelPosition(labelGroup, tSeq);
    labelGroup.addEventListener("click", ((function(_this) {
      return function(evt) {
        var id;
        id = evt.target.seqid;
        _this.msa.selmanager.handleSel(new selection.HorizontalSelection(_this.msa, id), evt);
      };
    })(this)), false);
    if (this.msa.config.registerMoveOvers) {
      labelGroup.addEventListener("mouseover", ((function(_this) {
        return function(evt) {
          var id;
          id = evt.target.seqid;
          _this.msa.selmanager.changeSel(new selection.HorizontalSelection(_this.msa, id));
        };
      })(this)), false);
    }
    return labelGroup;
  };

  return LabelElement;

})(StageElement);



},{"../selection/index":28,"../utils/general":52,"./StageElement":39}],44:[function(require,module,exports){
var SeqElement, StageElement, Utils, selection,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require("../utils/general");

selection = require("../selection/index");

StageElement = require("./StageElement");

module.exports = SeqElement = (function(_super) {
  __extends(SeqElement, _super);

  function SeqElement(msa) {
    this.msa = msa;
    void 0;
  }

  SeqElement.prototype.width = function(n) {
    return n * this.msa.zoomer.columnWidth;
  };

  SeqElement.prototype.setResiduePosition = function(residue, tSeq) {
    if (this.msa.zoomer.isTextVisible()) {
      return residue.textContent = tSeq.seq[residue.rowPos];
    } else {
      return residue.textContent = "";
    }
  };

  SeqElement.prototype.redraw = function(el, row, textVisibilityChanged) {
    var childs, i, tSeq, _i, _ref, _results;
    tSeq = row.tSeq;
    this.redrawDiv(el, tSeq);
    if (textVisibilityChanged) {
      childs = el.childNodes;
      _results = [];
      for (i = _i = 0, _ref = childs.length - 1; _i <= _ref; i = _i += 1) {
        _results.push(this.setResiduePosition(childs[i], tSeq));
      }
      return _results;
    }
  };

  SeqElement.prototype.redrawDiv = function(row, tSeq) {
    row.style.fontSize = "" + this.msa.zoomer.residueFontsize + "px";
    this.msa.colorscheme.colorRow(row, tSeq.id);
    return row.className += " biojs-msa-stage-level" + this.msa.zoomer.level;
  };

  SeqElement.prototype.create = function(row) {
    var n, residueGroup, residueSpan, spanGlobal, tSeq, _i, _ref;
    tSeq = row.tSeq;
    residueGroup = document.createDocumentFragment();
    spanGlobal = document.createElement("span");
    n = 0;
    for (n = _i = 0, _ref = tSeq.seq.length - 1; _i <= _ref; n = _i += 1) {
      residueSpan = document.createElement("span");
      residueSpan.rowPos = n;
      this.setResiduePosition(residueSpan, tSeq);
      if (!this.msa.config.speed) {
        residueSpan.addEventListener("click", ((function(_this) {
          return function(evt) {
            var id, selPos;
            id = evt.target.parentNode.seqid;
            selPos = new selection.PositionSelect(_this.msa, id, evt.target.rowPos);
            return _this.msa.selmanager.handleSel(selPos, evt);
          };
        })(this)), false);
      }
      if (this.msa.config.registerMoveOvers) {
        residueSpan.addEventListener("mouseover", ((function(_this) {
          return function(evt) {
            var id;
            id = evt.target.parentNode.seqid;
            return _this.msa.selmanager.changeSel(new selection.PositionSelect(_this.msa, id, evt.target.rowPos));
          };
        })(this)), false);
      }
      this.msa.colorscheme.colorResidue(residueSpan, tSeq, n);
      spanGlobal.appendChild(residueSpan);
    }
    spanGlobal.seqid = tSeq.id;
    this.redrawDiv(spanGlobal, tSeq);
    return spanGlobal;
  };

  return SeqElement;

})(StageElement);



},{"../selection/index":28,"../utils/general":52,"./StageElement":39}],45:[function(require,module,exports){
var Row, Stage, Utils;

Utils = require("../utils/general");

Row = require("../row");

module.exports = Stage = (function() {
  function Stage() {}

  Stage.prototype._init = function() {
    this.ID = String.fromCharCode(65 + Math.floor(Math.random() * 26));
    return this.globalID = 'biojs_msa_' + this.ID;
  };

  Stage.prototype.width = function(n) {
    var el, width, _i, _len, _ref;
    width = 0;
    _ref = this.elements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      width += el.width(n);
    }
    return width;
  };

  Stage.prototype.addSeqs = function(tSeqs) {
    var e, end, start, _i, _len;
    if (this.msa.config.autofit) {
      this.msa.zoomer.autofit(tSeqs);
    }
    if (tSeqs.id == null) {
      start = new Date().getTime();
      for (_i = 0, _len = tSeqs.length; _i < _len; _i++) {
        e = tSeqs[_i];
        this.addSeq(e);
      }
      end = new Date().getTime();
      return console.log("Adding seq time: " + (end - start) + " ms");
    } else {
      return this.addSeq(tSeqs);
    }
  };

  Stage.prototype.addSeq = function(tSeq) {
    return this.msa.seqs[tSeq.id] = new Row(tSeq, void 0);
  };

  Stage.prototype.removeSeq = function(id) {
    this.msa.seqs[id].layer.destroy();
    delete seqs[id];
    return this.orderSeqsAfterScheme();
  };

  Stage.prototype.drawSeqs = function() {
    var key, value, _ref, _results;
    _ref = this.msa.seqs;
    _results = [];
    for (key in _ref) {
      value = _ref[key];
      _results.push(this.drawSeq(value));
    }
    return _results;
  };

  return Stage;

})();



},{"../row":26,"../utils/general":52}],46:[function(require,module,exports){
var TileEventHandler,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = TileEventHandler = (function() {
  function TileEventHandler(tiler) {
    this.tiler = tiler;
    this._onContextMenu = __bind(this._onContextMenu, this);
    this._onMouseDown = __bind(this._onMouseDown, this);
  }

  TileEventHandler.prototype.init = function() {
    this.tiler.canvas.addEventListener("mousemove", (function(_this) {
      return function(e) {
        return _this._onMouseMove(e);
      };
    })(this));
    this.tiler.canvas.addEventListener("dblclick", (function(_this) {
      return function(e) {
        return _this._onDblClick(e);
      };
    })(this));
    this.tiler.canvas.addEventListener("contextmenu", (function(_this) {
      return function(e) {
        return _this._onContextMenu(e);
      };
    })(this));
    this.tiler.canvas.addEventListener("mousedown", (function(_this) {
      return function(e) {
        return _this._onMouseDown(e);
      };
    })(this));
    this.tiler.canvas.addEventListener("mouseup", (function(_this) {
      return function(e) {
        return _this._onMouseUp(e);
      };
    })(this));
    this.tiler.canvas.addEventListener("mouseout", (function(_this) {
      return function(e) {
        return _this._onMouseOut(e);
      };
    })(this));
    if (this.tiler.msa.config.keyevents) {
      return document.addEventListener("keydown", (function(_this) {
        return function(e) {
          return _this._onKeyDown(e);
        };
      })(this));
    }
  };

  TileEventHandler.prototype._onMouseMove = function(e) {
    if ((this.dragStartX != null) && (this.draglock != null)) {
      return this.moveCanvasDragEvent(e);
    }
  };

  TileEventHandler.prototype._onMouseUp = function(e) {
    if ((this.dragStartX != null) && (this.draglock != null)) {
      this.moveCanvasDragEvent(e);
    }
    return this.draglock = void 0;
  };

  TileEventHandler.prototype._onMouseOut = function(e) {
    return this.draglock = void 0;
  };

  TileEventHandler.prototype._onMouseDown = function(e) {
    var mouseX, mouseY, _ref;
    _ref = this.getMouseCoords(e), mouseX = _ref[0], mouseY = _ref[1];
    if (!this.tiler.control.checkForEvents(mouseX, mouseY)) {
      this.pauseEvent(e);
      this.dragStartX = e.pageX;
      this.dragStartY = e.pageY;
      this.dragViewStartX = this.tiler.viewportX;
      this.dragViewStartY = this.tiler.viewportY;
      return this.draglock = true;
    }
  };

  TileEventHandler.prototype._onContextMenu = function(e) {
    this.tiler.zoomCanvas(1 / this.tiler.dblClickVx, 1 / this.tiler.dblClickVy);
    this.tiler.refreshZoom();
    return this.tiler.draw();
  };

  TileEventHandler.prototype.getMouseCoords = function(e) {
    var mouseX, mouseY;
    mouseX = e.offsetX;
    mouseY = e.offsetY;
    if (mouseX == null) {
      mouseX = e.layerX;
      mouseY = e.layerY;
    }
    if (mouseX == null) {
      mouseX = e.pageX;
      mouseY = e.pageY;
    }
    if (mouseX == null) {
      console.log(e);
      console.log("no mouse event defined. your browser sucks");
      return;
    }
    return [mouseX, mouseY];
  };

  TileEventHandler.prototype._onDblClick = function(e) {
    var mouseX, mouseY, _ref;
    this.draglock = void 0;
    _ref = this.getMouseCoords(e), mouseX = _ref[0], mouseY = _ref[1];
    this.tiler.moveCenterTo(mouseX, mouseY);
    console.log("#EVENT viewix:" + this.tiler.viewportX + ",y:" + this.tiler.viewportY);
    this.tiler.zoomCanvas(this.tiler.dblClickVx, this.tiler.dblClickVy);
    this.tiler.draw();
    return console.log("#mouse:" + mouseX + ",y:" + mouseY);
  };

  TileEventHandler.prototype._onKeyDown = function(e) {
    var dist, key;
    key = e.keyCode;
    dist = 100;
    switch (key) {
      case 37:
      case 72:
        this.tiler.moveView(-dist, 0);
        break;
      case 38:
      case 75:
        this.tiler.moveView(0, -dist);
        break;
      case 39:
      case 76:
        this.tiler.moveView(+dist, 0);
        break;
      case 40:
      case 74:
        this.tiler.moveView(0, dist);
        break;
      case 33:
        this.tiler.moveView(0, -this.tiler.canvas.height);
        break;
      case 34:
        this.tiler.moveView(0, +this.tiler.canvas.height);
        break;
      case 107:
        this.tiler.zoomCanvas(2, 2);
        break;
      case 109:
        this.tiler.zoomCanvas(0.5, 0.5);
    }
    this.pauseEvent(e);
    this.tiler.checkPos();
    return this.tiler.draw();
  };

  TileEventHandler.prototype.moveCanvasDragEvent = function(e) {
    var distX, distY;
    distX = e.pageX - this.dragStartX;
    distY = e.pageY - this.dragStartY;
    this.tiler.viewportX = this.dragViewStartX - distX;
    this.tiler.viewportY = this.dragViewStartY - distY;
    this.tiler.checkPos();
    this.tiler.draw();
    return this.pauseEvent(e);
  };

  TileEventHandler.prototype.pauseEvent = function(e) {
    if (e == null) {
      e = window.event;
    }
    if (e.stopPropagation) {
      e.stopPropagation();
    }
    if (e.preventDefault) {
      e.preventDefault();
    }
    e.cancelBubble = true;
    e.returnValue = false;
    return false;
  };

  return TileEventHandler;

})();



},{}],47:[function(require,module,exports){
var TileEventHandler, TileStage, TileStageButtons, TileStageSequence, Utils, stage,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Utils = require("../utils/general");

TileEventHandler = require("./tileEventHandler");

TileStageButtons = require("./tileStageButtons");

TileStageSequence = require("./tileStageSequence");

stage = require("./stage");

module.exports = TileStage = (function(_super) {
  __extends(TileStage, _super);

  function TileStage(msa) {
    this.msa = msa;
    this.msa.zoomer.setZoomLevel(1);
    this.tileSize = 200;
    this.evtHdlr = new TileEventHandler(this);
    this.control = new TileStageButtons(this);
    this.seqtile = new TileStageSequence(this);
    this._createCanvas();
    this._prepareCanvas();
    this.viewportX = 120;
    this.viewportY = 100;
    this.dblClickVx = 2;
    this.dblClickVy = 2;
    this.debug = 1;
  }

  TileStage.prototype.moveCenterTo = function(mouseX, mouseY) {
    return this.moveView(Math.round(mouseX - (this.canvas.width / 2)), Math.round(mouseY - (this.canvas.height / 2)));
  };

  TileStage.prototype.moveView = function(x, y) {
    this.viewportX += x;
    return this.viewportY += y;
  };

  TileStage.prototype.zoomCanvas = function(vx, vy) {
    var centerX, centerY, newVx, newVy;
    newVx = this.msa.zoomer.columnWidth * vx;
    newVy = this.msa.zoomer.columnHeight * vy;
    if (newVx < 1 || newVy < 1) {
      console.log("invalid zoom level - x:" + newVx + "y:" + newVy);
    } else {
      console.log("#BEFORE viewix:" + this.viewportX + ",y:" + this.viewportY);
      if (vx !== 0) {
        centerX = this.viewportX + this.canvas.width / 2;
        centerX = centerX / this.msa.zoomer.columnWidth * newVx;
        this.viewportX = Math.round(centerX - this.canvas.width / 2);
      }
      if (vy !== 0) {
        centerY = this.viewportY + this.canvas.height / 2;
        centerY = centerY / this.msa.zoomer.columnHeight * newVy;
        this.viewportY = Math.round(centerY - this.canvas.height / 2);
      }
      console.log("#AFTER viewix:" + this.viewportX + ",y:" + this.viewportY);
      this.msa.zoomer.columnWidth = newVx;
      this.msa.zoomer.columnHeight = newVy;
      this.refreshZoom();
    }
    return this.checkPos();
  };

  TileStage.prototype.checkPos = function() {
    var _ref;
    return _ref = this._checkPos(this.viewportX, this.viewportY), this.viewportX = _ref[0], this.viewportY = _ref[1], _ref;
  };

  TileStage.prototype._checkPos = function(x, y) {
    if (x < 0) {
      x = 0;
    }
    if (y < 0) {
      y = 0;
    }
    if (this.maxWidth - this.canvas.width < x) {
      x = this.maxWidth - this.canvas.width;
    }
    if (this.maxHeight < y) {
      y = this.maxHeight;
    }
    return [x, y];
  };

  TileStage.prototype.asyncLoaderParallel = function() {
    var p;
    p = new Parallel(this.msa.seqs);
    return p.spawn((function(_this) {
      return function(data) {
        return data;
      };
    })(this)).then((function(_this) {
      return function(data) {
        _this.moveView(300, 300);
        return _this.draw;
      };
    })(this));
  };

  TileStage.prototype.asyncLoader = function(height, x, y, vx, vy) {
    var _ref, _ref1;
    if (height === this.msa.zoomer.columnHeight) {
      if (x < this.maxWidth / this.tileSize && y < this.maxHeight / this.tileSize && x >= 0 && y >= 0) {
        if (((_ref = this.map[height]) != null ? (_ref1 = _ref[x]) != null ? _ref1[y] : void 0 : void 0) == null) {
          console.log("prerender:" + x + ",j:" + y);
          this.seqtile.drawTile(x, y);
        }
        return setTimeout(((function(_this) {
          return function() {
            return _this.asyncLoader(height, x + vx, y + vy, vx, vy);
          };
        })(this)), 100);
      }
    }
  };

  TileStage.prototype.draw = function() {
    var distViewToFirstX, distViewToFirstY, firstXTile, firstYTile, height, i, j, mapX, mapY, notExactFitX, notExactFitY, tile, tileX, tileY, _i, _j, _ref, _ref1, _ref2, _ref3, _ref4;
    if (this.orderList == null) {
      this.orderList = this.msa.ordering.getSeqOrder(this.msa.seqs);
      this.maxLength = this.msa.zoomer.getMaxLength();
      this.msa.zoomer.columnWidth = 1;
      this.msa.zoomer.columnHeight = 1;
      this.refreshZoom();
      if (this.msa.config.prerender) {
        this.asyncLoader(1, 0, 0, 0, 1);
        this.asyncLoader(1, 1, 0, 0, 1);
        this.asyncLoader(1, 2, 0, 0, 1);
        this.asyncLoader(1, 3, 0, 0, 1);
      }
    }
    height = this.msa.zoomer.columnHeight;
    _ref = this.getFirstTile(), distViewToFirstX = _ref[0], distViewToFirstY = _ref[1], firstXTile = _ref[2], firstYTile = _ref[3];
    notExactFitX = distViewToFirstX === 0 ? 0 : 2;
    notExactFitY = distViewToFirstY === 0 ? 0 : 2;
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    for (i = _i = 0, _ref1 = this.tilesX - 1 + notExactFitX; _i <= _ref1; i = _i += 1) {
      for (j = _j = 0, _ref2 = this.tilesY - 1 + notExactFitY; _j <= _ref2; j = _j += 1) {
        mapX = i + firstXTile;
        mapY = j + firstYTile;
        tileX = i * this.tileSize - distViewToFirstX;
        tileY = j * this.tileSize - distViewToFirstY;
        if (((_ref3 = this.map[height]) != null ? (_ref4 = _ref3[mapX]) != null ? _ref4[mapY] : void 0 : void 0) != null) {
          tile = this.map[height][mapX][mapY];
        } else {
          tile = this.seqtile.drawTile(mapX, mapY);
        }
        this.ctx.putImageData(tile, tileX, tileY);
      }
    }
    this.control.draw(this.ctx);
    return this.canvasWrapper;
  };

  TileStage.prototype.getFirstTile = function() {
    var distViewToFirstX, distViewToFirstY, firstXTile, firstYTile;
    distViewToFirstX = this.viewportX % this.tileSize;
    distViewToFirstY = this.viewportY % this.tileSize;
    if (distViewToFirstX < 0) {
      distViewToFirstX += this.tileSize;
    }
    if (distViewToFirstY < 0) {
      distViewToFirstY += this.tileSize;
    }
    firstXTile = Math.floor(this.viewportX / this.tileSize);
    firstYTile = Math.floor(this.viewportY / this.tileSize);
    return [distViewToFirstX, distViewToFirstY, firstXTile, firstYTile];
  };

  TileStage.prototype.refreshZoom = function() {
    var height, width;
    this.tilesX = Math.ceil(this.canvas.width / this.tileSize);
    this.tilesY = Math.ceil(this.canvas.height / this.tileSize);
    height = this.msa.zoomer.columnHeight;
    width = this.msa.zoomer.columnWidth;
    this.maxWidth = this.maxLength * width;
    this.maxHeight = this.msa.seqs.length * height;
    return this.msa.log.log("zoom:" + width);
  };

  TileStage.prototype.width = function(n) {
    return 0;
  };

  TileStage.prototype.resetTiles = function() {
    return this.map = [];
  };

  TileStage.prototype._prepareCanvas = function() {
    this.refreshZoom();
    this.viewportX = 0;
    this.viewportY = 0;
    this.map = [];
    return this.evtHdlr.init();
  };

  TileStage.prototype._createCanvas = function() {
    this.canvas = document.createElement("canvas");
    this.canvas.width = 500;
    this.canvas.height = 500;
    this.canvas.id = "can";
    this.ctx = this.canvas.getContext("2d");
    this.canvas.setAttribute("id", "" + this.globalID + "_canvas");
    this.canvas.style.cursor = "move";
    this.canvasWrapper = document.createElement("div");
    this.canvasWrapper.appendChild(this.canvas);
    this.canvasWrapper.style.overflow = "scroll";
    this.canvasWrapper.style.height = "550px";
    this.canvasTile = document.createElement("canvas");
    this.canvasTile.width = this.tileSize;
    this.canvasTile.height = this.tileSize;
    return this.ctxTile = this.canvasTile.getContext("2d");
  };

  return TileStage;

})(stage);



},{"../utils/general":52,"./stage":45,"./tileEventHandler":46,"./tileStageButtons":48,"./tileStageSequence":49}],48:[function(require,module,exports){
var TileStageButtons,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = TileStageButtons = (function() {
  function TileStageButtons(tiler) {
    var imgdir;
    this.tiler = tiler;
    this.toggleFullscreen = __bind(this.toggleFullscreen, this);
    this.events = {};
    imgdir = "res/img/";
    this.btnFullscreen = new Image();
    this.btnFullscreen.src = imgdir + "fullscreen.png";
    this.btnFullscreen.onload = (function(_this) {
      return function() {
        return _this.btnFullscreen.loaded = 1;
      };
    })(this);
    this.btnZoomIn = new Image();
    this.btnZoomIn.src = imgdir + "zoom-in.png";
    this.btnZoomIn.onload = (function(_this) {
      return function() {
        return _this.btnZoomIn.loaded = 1;
      };
    })(this);
    this.btnZoomOut = new Image();
    this.btnZoomOut.src = imgdir + "zoom-out.png";
    this.btnZoomOut.onload = (function(_this) {
      return function() {
        return _this.btnZoomOut.loaded = 1;
      };
    })(this);
  }

  TileStageButtons.prototype.draw = function(ctx) {
    if ((this.btnZoomIn.loaded != null) && (this.btnZoomOut.loaded != null)) {
      this.drawZooming(ctx);
    }
    this.drawProgressButton(ctx);
    if (this.btnFullscreen.loaded != null) {
      return this.drawFullscreenButton(ctx);
    }
  };

  TileStageButtons.prototype.checkForEvents = function(mouseX, mouseY) {
    var arr, name, _ref;
    _ref = this.events;
    for (name in _ref) {
      arr = _ref[name];
      if ((arr[0] <= mouseX && mouseX <= arr[2]) && (arr[1] <= mouseY && mouseY <= arr[3])) {
        arr[4]();
      }
    }
    return false;
  };

  TileStageButtons.prototype.setEventWidth = function(name, coords, callback) {
    return this.setEvent(name, [coords[0], coords[1], coords[2] + coords[0], coords[3] + coords[1]], callback);
  };

  TileStageButtons.prototype.setEvent = function(name, coords, callback) {
    console.log("new event:" + name + "," + coords.join(","));
    coords.push(callback);
    return this.events[name] = coords;
  };

  TileStageButtons.prototype.drawZooming = function(ctx) {
    var callback, coordIn, coordOut;
    ctx.globalAlpha = 0.5;
    callback = (function(_this) {
      return function() {
        _this.tiler.zoomCanvas(_this.tiler.dblClickVx, _this.tiler.dblClickVy);
        return _this.tiler.draw();
      };
    })(this);
    coordIn = [this.tiler.canvas.width - 40, this.tiler.canvas.height - 40, 15, 15];
    this.setEventWidth("zoomin", coordIn, callback);
    coordIn.unshift(this.btnZoomIn);
    ctx.drawImage.apply(ctx, coordIn);
    callback = (function(_this) {
      return function() {
        _this.tiler.zoomCanvas(1 / _this.tiler.dblClickVx, 1 / _this.tiler.dblClickVy);
        return _this.tiler.draw();
      };
    })(this);
    coordOut = [this.tiler.canvas.width - 40, this.tiler.canvas.height - 25, 15, 15];
    this.setEventWidth("zoomout", coordOut, callback);
    coordOut.unshift(this.btnZoomOut);
    ctx.drawImage.apply(ctx, coordOut);
    return ctx.globalAlpha = 1;
  };

  TileStageButtons.prototype.drawProgressButton = function(ctx) {
    var pos, progressHeight, progressWidth, ratio;
    ctx.fillStyle = "grey";
    ctx.globalAlpha = 0.7;
    ratio = this.tiler.maxHeight / this.tiler.maxWidth;
    progressWidth = 20;
    progressHeight = 30;
    ctx.fillRect(this.tiler.canvas.width - progressWidth - 50, this.tiler.canvas.height - 40, progressWidth, progressHeight);
    pos = Math.round(this.tiler.viewportY / this.tiler.maxHeight * progressHeight);
    ctx.fillStyle = "red";
    ctx.fillRect(this.tiler.canvas.width - progressWidth - 50, this.tiler.canvas.height - 40 + pos, progressWidth, 1);
    return ctx.globalAlpha = 1;
  };

  TileStageButtons.prototype.drawFullscreenButton = function(ctx) {
    var coords;
    ctx.globalAlpha = 0.5;
    coords = [this.tiler.canvas.width - 90, this.tiler.canvas.height - 40, 15, 15];
    this.setEventWidth("fullscreen", coords, this.toggleFullscreen);
    coords.unshift(this.btnFullscreen);
    ctx.drawImage.apply(ctx, coords);
    return ctx.globalAlpha = 1;
  };

  TileStageButtons.prototype.toggleFullscreen = function() {
    if (this.tiler.canvasWrapper.style.overflow === "hidden") {
      return this.leaveFullscreen();
    } else {
      return this.goFullscreen();
    }
  };

  TileStageButtons.prototype.leaveFullscreen = function() {
    this.tiler.canvas.width = 500;
    this.tiler.canvas.height = 500;
    this.tiler.canvas.style.position = "relative";
    this.tiler.canvas.style.left = "0px";
    this.tiler.canvas.style.top = "0px";
    this.tiler.canvasWrapper.style.overflow = "auto";
    document.body.style.overflow = "auto";
    window.scrollTo(0, 0);
    this.tiler.refreshZoom();
    return this.tiler.draw();
  };

  TileStageButtons.prototype.goFullscreen = function() {
    this.tiler.canvas.width = window.innerWidth;
    this.tiler.canvas.height = window.innerHeight;
    this.tiler.canvas.style.position = "fixed";
    this.tiler.canvas.style.left = "0px";
    this.tiler.canvas.style.top = "0px";
    this.tiler.canvasWrapper.style.overflow = "hidden";
    document.body.style.overflow = "hidden";
    window.scrollTo(0, 0);
    this.tiler.refreshZoom();
    return this.tiler.draw();
  };

  return TileStageButtons;

})();



},{}],49:[function(require,module,exports){
var CanvasStage, TileStageSequence;

CanvasStage = require("./canvasStage");

module.exports = TileStageSequence = (function() {
  function TileStageSequence(tiler) {
    this.tiler = tiler;
  }

  TileStageSequence.prototype.drawTile = function(i, j) {
    var color, cx, height, id, index, pos, seq, seqEndX, seqEndY, seqNr, seqStartX, seqStartY, tile, tileX, tileY, width, _i, _j, _ref, _ref1;
    height = this.tiler.msa.zoomer.columnHeight;
    width = this.tiler.msa.zoomer.columnWidth;
    if (this.tiler.map[height] == null) {
      this.tiler.map[height] = [];
    }
    if (this.tiler.map[height][i] == null) {
      this.tiler.map[height][i] = [];
    }
    tileX = i * this.tiler.tileSize;
    tileY = j * this.tiler.tileSize;
    cx = this.tiler.ctxTile;
    if (this.tiler.maxWidth > tileX && this.tiler.maxHeight > tileY && tileX >= 0 && tileY >= 0) {
      seqStartX = Math.floor(tileX / width);
      seqEndX = seqStartX + Math.ceil(this.tiler.tileSize / width);
      seqStartY = Math.floor(tileY / height);
      seqEndY = seqStartY + Math.ceil(this.tiler.tileSize / height);
      if (this.tiler.maxLength > seqEndX) {
        seqEndX = this.tiler.maxLength;
      }
      if (seqEndY > this.tiler.msa.seqs.length) {
        seqEndY = this.tiler.msa.seqs.length;
      }
      cx.fillStyle = "#eeeeee";
      cx.fillRect(0, 0, this.tiler.tileSize, this.tiler.tileSize);
      pos = 0;
      for (seqNr = _i = seqStartY, _ref = seqEndY - 1; _i <= _ref; seqNr = _i += 1) {
        id = this.tiler.orderList[seqNr];
        seq = this.tiler.msa.seqs[id].tSeq.seq;
        for (index = _j = seqStartX, _ref1 = seqEndX - 1; _j <= _ref1; index = _j += 1) {
          color = CanvasStage.taylorColors[seq[index]];
          if (color === void 0) {
            color = "111111";
            continue;
          }
          cx.fillStyle = "#" + color;
          cx.fillRect((index - seqStartX) * width, pos, width, height);
        }
        pos += height;
      }
    } else {
      cx.fillStyle = "grey";
      cx.fillRect(0, 0, this.tiler.tileSize, this.tiler.tileSize);
    }
    if (this.tiler.debug) {
      this._drawDebugInfo(cx, i, j);
    }
    tile = cx.getImageData(0, 0, this.tiler.tileSize, this.tiler.tileSize);
    this.tiler.map[height][i][j] = tile;
    cx.clearRect(0, 0, this.tiler.canvasTile.width, this.tiler.canvasTile.height);
    return tile;
  };

  TileStageSequence.prototype._drawDebugInfo = function(cx, i, j) {
    var endPos;
    cx.rect(0, 0, this.tiler.tileSize, this.tiler.tileSize);
    cx.stroke();
    cx.font = "30px Georgia";
    cx.fillStyle = "#000000";
    cx.fillText("" + j + "," + i, 20, 50);
    endPos = Math.floor(this.tiler.tileSize * 3 / 4);
    cx.fillText("" + j + "," + i, 20, endPos);
    cx.fillText("" + j + "," + i, endPos, 50);
    return cx.fillText("" + j + "," + i, endPos, endPos);
  };

  return TileStageSequence;

})();



},{"./canvasStage":40}],50:[function(require,module,exports){
var Arrays;

module.exports = Arrays = (function() {
  function Arrays() {}

  Arrays.recursiveDictFiller = function(dicDefault, dicFill) {
    var entryFill, key, value;
    for (key in dicDefault) {
      value = dicDefault[key];
      entryFill = dicFill[key];
      if (typeof value === "object") {
        if (entryFill != null) {
          dicFill[key] = Arrays.recursiveDictFiller(dicDefault[key], entryFill);
        } else {
          dicFill[key] = value;
        }
      } else {
        if (entryFill == null) {
          dicFill[key] = value;
        }
      }
    }
    return dicFill;
  };

  return Arrays;

})();



},{}],51:[function(require,module,exports){
var BMath;

module.exports = BMath = (function() {
  function BMath() {}

  BMath.randomInt = function(lower, upper) {
    var _ref, _ref1;
    if (upper == null) {
      _ref = [0, lower], lower = _ref[0], upper = _ref[1];
    }
    if (lower > upper) {
      _ref1 = [upper, lower], lower = _ref1[0], upper = _ref1[1];
    }
    return Math.floor(Math.random() * (upper - lower + 1) + lower);
  };

  BMath.uniqueId = function(length) {
    var id;
    if (length == null) {
      length = 8;
    }
    id = "";
    while (id.length < length) {
      id += Math.random().toString(36).substr(2);
    }
    return id.substr(0, length);
  };

  BMath.getRandomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  return BMath;

})();



},{}],52:[function(require,module,exports){
var Utils = {};

/**
 * Remove an element and provide a function that inserts it into its original position
 * https://developers.google.com/speed/articles/javascript-dom
 * @param element {Element} The element to be temporarily removed
 * @return {Function} A function that inserts the element into its original position
 **/
Utils.removeToInsertLater = function(element) {
  var parentNode = element.parentNode;
  var nextSibling = element.nextSibling;
  parentNode.removeChild(element);
  return function() {
    if (nextSibling) {
      parentNode.insertBefore(element, nextSibling);
    } else {
      parentNode.appendChild(element);
    }
  };
};

/**
 * fastest possible way to destroy all sub nodes (aka childs) 
 * http://jsperf.com/innerhtml-vs-removechild/15
 * @param element {Element} The element for which all childs should be removed
 */
Utils.removeAllChilds = function (element){
  var count = 0;
  while (element.firstChild) {
    count++;
    element.removeChild(element.firstChild);
  }
};

/*
 * renders the color string nicely
 */
Utils.rgb = function (r,g,b) {
  // we use the overloaded, shorthand form (color)
  if( typeof g === "undefined"){
    return Utils.rgb(r.r,r.g,r.b);
  }
  return ["rgb(", [(r||0),(g||0),(b||0)].join(','), ')'].join();
};

Utils.rgba = function (r,g,b,a) {
  // we use the overloaded, shorthand form (color, a)
  if( typeof b === "undefined"){
    return Utils.rgba(r.r,r.g,r.b,g);
  }
  return ["rgba(", [(r||0),(g||0),(b||0), (a||1)].join(','), ')'].join("");
};

Utils.hex2rgb = function(hex){
  var bigint = parseInt(hex, 16);
  if( !isNaN(bigint)){
    var r = (bigint >> 16) & 255;
    var g = (bigint >> 8) & 255;
    var b = bigint & 255;
    return {"r":r ,"g": g ,"b": b};
  }else{
    if( hex === "red"){
      return {"r":255 ,"g": 0 ,"b": 0};
    } else if( hex === "green"){
      return {"r":0,"g": 255 ,"b": 0};
    } else if( hex === "blue"){
      return {"r":0,"g": 0 ,"b": 255};
    }
  }
};

Utils.rgb2hex = function (rgb){
  rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
  return "#" +
    ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
    ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
    ("0" + parseInt(rgb[3],10).toString(16)).slice(-2);
};

Utils.splitNChars = function(txt, num) {
  var result = [];
  for (var i = 0; i < txt.length; i += num) {
    result.push(txt.substr(i, num));
  }
  return result;
};

// count a associative array
Object.size = function(obj) {
  var size = 0, key;
  for (key in obj) {
    if (obj.hasOwnProperty(key)){
      size++;
    }
  }
  return size;
};

module.exports = Utils;

},{}],53:[function(require,module,exports){
module.exports.bmath = require("./bmath");

},{"./bmath":51}],54:[function(require,module,exports){
var ZoomBar,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

module.exports = ZoomBar = (function() {
  function ZoomBar(msa, min, max) {
    var zoomForm, zoomSlider;
    this.msa = msa;
    this._reDraw = __bind(this._reDraw, this);
    zoomForm = document.createElement("form");
    zoomSlider = document.createElement("input");
    zoomSlider.type = "range";
    zoomSlider.name = "points";
    if (min == null) {
      min = 1;
    }
    if (max == null) {
      max = Math.max(30, this.msa.zoomer.level);
    }
    zoomSlider.min = min;
    zoomSlider.max = max;
    zoomSlider.style.width = "60%";
    zoomSlider.value = this.msa.zoomer.level;
    zoomForm.appendChild(zoomSlider);
    this.locked = false;
    zoomSlider.addEventListener("mousedown", (function(_this) {
      return function(evt) {
        _this.firstClick = true;
        return _this._reDraw();
      };
    })(this));
    zoomSlider.addEventListener("mousemove", (function(_this) {
      return function(evt) {
        if (_this.lastValue !== _this.zoomSlider.value && (_this.firstClick != null)) {
          _this.lastValue = _this.zoomSlider.value;
          if (!_this.locked) {
            _this.locked = true;
            return window.setTimeout(_this._reDraw, 30);
          }
        }
      };
    })(this));
    this.zoomSlider = zoomSlider;
  }

  ZoomBar.prototype._reDraw = function() {
    var value;
    value = this.zoomSlider.value;
    this.msa.zoomer.setZoomLevel(value);
    this.msa.config.autofit = false;
    this.msa.redraw('stage');
    this.msa.redraw('marker');
    return this.locked = false;
  };

  ZoomBar.prototype.draw = function() {
    return this.zoomSlider;
  };

  return ZoomBar;

})();



},{}],55:[function(require,module,exports){
var Zoomer;

module.exports = Zoomer = (function() {
  function Zoomer(msa) {
    this.msa = msa;
    this.maxLabelLength = 20;
    this.setZoomLevel(2);
    this.len = 0;
    this._setWidth();
  }

  Zoomer.prototype.setZoomLevel = function(value) {
    this.level = value;
    this.columnWidth = 1 * value;
    this.labelFontsize = Math.floor(3 + 0.8 * value);
    this.residueFontsize = Math.floor(3 + 0.8 * value);
    this.columnHeight = 5 + 1 * value;
    this.columnSpacing = 0;
    if (this.maxLabelLength > 0) {
      this.seqOffset = this.maxLabelLength * this.labelFontsize / 2 + 2 * value;
    }
    if (value === 1) {
      return this.seqOffset = 20;
    }
  };

  Zoomer.prototype.autofit = function(tSeqs) {
    var level;
    level = this.guessZoomLevel(tSeqs);
    return this.setZoomLevel(level);
  };

  Zoomer.prototype.isTextVisible = function() {
    if (this.labelFontsize > 5) {
      return true;
    } else {
      return false;
    }
  };

  Zoomer.prototype.getStepSize = function() {
    var stepSize;
    stepSize = 1;
    if (this.columnWidth <= 15) {
      stepSize = 2;
    }
    if (this.columnWidth <= 5) {
      stepSize = 5;
    }
    if (this.columnWidth === 2) {
      stepSize = 10;
    }
    if (this.columnWidth === 1) {
      stepSize = 20;
    }
    return stepSize;
  };

  Zoomer.prototype._setWidth = function() {
    var _rect;
    _rect = this.msa.container.getBoundingClientRect();
    this._width = _rect.right - _rect.left;
    if (this._width === 0) {
      _rect = this.msa.container.parentNode.getBoundingClientRect();
      return this._width = _rect.right - _rect.left;
    }
  };

  Zoomer.prototype.guessZoomLevel = function(tSeqs) {
    var level;
    this.len = this.getMaxLength(tSeqs);
    this.maxLabelLength = this.getMaxLabelLength(tSeqs);
    level = 2;
    if (this.len > this._width) {
      return 1;
    } else {
      this.setZoomLevel(level);
      while (this.msa.stage.width(this.len) < this._width && level <= 100) {
        level++;
        this.setZoomLevel(level);
      }
      if (level === 2) {
        console.log("len: " + this.len + " - width: " + this._width);
        console.log("stage: " + (this.msa.stage.width(this.len)));
        console.log("stage: " + this.msa.container.id);
      }
      return level - 1;
    }
  };

  Zoomer.prototype.getMaxLength = function(seqs) {
    var key, nMax, value, _i, _len;
    nMax = 0;
    if (seqs != null) {
      for (_i = 0, _len = seqs.length; _i < _len; _i++) {
        value = seqs[_i];
        if ((value != null ? value.seq : void 0) != null) {
          nMax = Math.max(nMax, value.seq.length);
        }
      }
    } else {
      seqs = this.msa.seqs;
      for (key in seqs) {
        value = seqs[key];
        nMax = Math.max(nMax, value.tSeq.seq.length);
      }
    }
    return nMax;
  };

  Zoomer.prototype.getMaxLabelLength = function(seqs) {
    var key, nMax, value, _i, _len;
    nMax = 0;
    if (seqs != null) {
      for (_i = 0, _len = seqs.length; _i < _len; _i++) {
        value = seqs[_i];
        if ((value != null ? value.name : void 0) != null) {
          nMax = Math.max(nMax, value.name.length);
        }
      }
    } else {
      seqs = this.msa.seqs;
      for (key in seqs) {
        value = seqs[key];
        nMax = Math.max(nMax, value.tSeq.name.length);
      }
    }
    return nMax;
  };

  return Zoomer;

})();



},{}]},{},[1])